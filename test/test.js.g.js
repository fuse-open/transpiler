"use strict";

const fs = require("fs");

const path = require("path");

const {
  spawn
} = require("child_process");

const {
  spawnSync
} = require("child_process");

function transpile(port, file) {
  const client = spawnSync("node", [path.join(__dirname, "..", "src", "client.js"), port, path.join(__dirname, file)]);
  if (client.error) throw client.error;
  const stderr = String(client.stderr);
  if (stderr.length) console.error(stderr);
  fs.writeFileSync(path.join(__dirname, file) + ".g.js", String(client.stdout));
  return client.status;
}

function runTests(port) {
  let failed = 0;

  for (file of fs.readdirSync(__dirname)) {
    if (file.endsWith('.g.js')) continue;

    switch (file.split('.').pop()) {
      case "ts":
      case "js":
        break;

      default:
        continue;
    }

    console.log(file);
    const status = transpile(port, file);
    if (status != 0) failed++;
  }

  if (!failed) console.log(`\nall tests passed`);else console.log(`\n${failed} tests failed`);
  return failed;
} // Start transpiler server.


const server = spawn("node", [process.argv.length > 2 ? process.argv[2] : path.join(__dirname, "..", "src", "server.js")]);
server.stdout.on('data', data => {
  // Get port from log.
  const port = data.toString().trim().split(":")[1]; // Run test suite.

  process.exit(runTests(port));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicGF0aCIsInNwYXduIiwic3Bhd25TeW5jIiwidHJhbnNwaWxlIiwicG9ydCIsImZpbGUiLCJjbGllbnQiLCJqb2luIiwiX19kaXJuYW1lIiwiZXJyb3IiLCJzdGRlcnIiLCJTdHJpbmciLCJsZW5ndGgiLCJjb25zb2xlIiwid3JpdGVGaWxlU3luYyIsInN0ZG91dCIsInN0YXR1cyIsInJ1blRlc3RzIiwiZmFpbGVkIiwicmVhZGRpclN5bmMiLCJlbmRzV2l0aCIsInNwbGl0IiwicG9wIiwibG9nIiwic2VydmVyIiwicHJvY2VzcyIsImFyZ3YiLCJvbiIsImRhdGEiLCJ0b1N0cmluZyIsInRyaW0iLCJleGl0Il0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUNFLEVBQUFBO0FBQUQsSUFBVUYsT0FBTyxDQUFDLGVBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFDRyxFQUFBQTtBQUFELElBQWNILE9BQU8sQ0FBQyxlQUFELENBQTNCOztBQUVBLFNBQVNJLFNBQVQsQ0FBbUJDLElBQW5CLEVBQXlCQyxJQUF6QixFQUErQjtBQUMzQixRQUFNQyxNQUFNLEdBQUdKLFNBQVMsQ0FBQyxNQUFELEVBQVMsQ0FDN0JGLElBQUksQ0FBQ08sSUFBTCxDQUFVQyxTQUFWLEVBQXFCLElBQXJCLEVBQTJCLEtBQTNCLEVBQWtDLFdBQWxDLENBRDZCLEVBRTdCSixJQUY2QixFQUV2QkosSUFBSSxDQUFDTyxJQUFMLENBQVVDLFNBQVYsRUFBcUJILElBQXJCLENBRnVCLENBQVQsQ0FBeEI7QUFLQSxNQUFJQyxNQUFNLENBQUNHLEtBQVgsRUFDSSxNQUFNSCxNQUFNLENBQUNHLEtBQWI7QUFFSixRQUFNQyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDSSxNQUFSLENBQXJCO0FBQ0EsTUFBSUEsTUFBTSxDQUFDRSxNQUFYLEVBQ0lDLE9BQU8sQ0FBQ0osS0FBUixDQUFjQyxNQUFkO0FBRUpaLEVBQUFBLEVBQUUsQ0FBQ2dCLGFBQUgsQ0FBaUJkLElBQUksQ0FBQ08sSUFBTCxDQUFVQyxTQUFWLEVBQXFCSCxJQUFyQixJQUE2QixPQUE5QyxFQUF1RE0sTUFBTSxDQUFDTCxNQUFNLENBQUNTLE1BQVIsQ0FBN0Q7QUFDQSxTQUFPVCxNQUFNLENBQUNVLE1BQWQ7QUFDSDs7QUFFRCxTQUFTQyxRQUFULENBQWtCYixJQUFsQixFQUF3QjtBQUNwQixNQUFJYyxNQUFNLEdBQUcsQ0FBYjs7QUFFQSxPQUFLYixJQUFMLElBQWFQLEVBQUUsQ0FBQ3FCLFdBQUgsQ0FBZVgsU0FBZixDQUFiLEVBQXdDO0FBQ3BDLFFBQUlILElBQUksQ0FBQ2UsUUFBTCxDQUFjLE9BQWQsQ0FBSixFQUNJOztBQUVKLFlBQVFmLElBQUksQ0FBQ2dCLEtBQUwsQ0FBVyxHQUFYLEVBQWdCQyxHQUFoQixFQUFSO0FBQ0ksV0FBSyxJQUFMO0FBQ0EsV0FBSyxJQUFMO0FBQ0k7O0FBQ0o7QUFDSTtBQUxSOztBQVFBVCxJQUFBQSxPQUFPLENBQUNVLEdBQVIsQ0FBWWxCLElBQVo7QUFDQSxVQUFNVyxNQUFNLEdBQUdiLFNBQVMsQ0FBQ0MsSUFBRCxFQUFPQyxJQUFQLENBQXhCO0FBRUEsUUFBSVcsTUFBTSxJQUFJLENBQWQsRUFDSUUsTUFBTTtBQUNiOztBQUVELE1BQUksQ0FBQ0EsTUFBTCxFQUNJTCxPQUFPLENBQUNVLEdBQVIsQ0FBYSxvQkFBYixFQURKLEtBR0lWLE9BQU8sQ0FBQ1UsR0FBUixDQUFhLEtBQUlMLE1BQU8sZUFBeEI7QUFFSixTQUFPQSxNQUFQO0FBQ0gsQyxDQUVEOzs7QUFDQSxNQUFNTSxNQUFNLEdBQUd2QixLQUFLLENBQUMsTUFBRCxFQUFTLENBQ3pCd0IsT0FBTyxDQUFDQyxJQUFSLENBQWFkLE1BQWIsR0FBc0IsQ0FBdEIsR0FDTWEsT0FBTyxDQUFDQyxJQUFSLENBQWEsQ0FBYixDQUROLEdBRU0xQixJQUFJLENBQUNPLElBQUwsQ0FBVUMsU0FBVixFQUFxQixJQUFyQixFQUEyQixLQUEzQixFQUFrQyxXQUFsQyxDQUhtQixDQUFULENBQXBCO0FBTUFnQixNQUFNLENBQUNULE1BQVAsQ0FBY1ksRUFBZCxDQUFpQixNQUFqQixFQUF5QkMsSUFBSSxJQUFJO0FBQzdCO0FBQ0EsUUFBTXhCLElBQUksR0FBR3dCLElBQUksQ0FBQ0MsUUFBTCxHQUFnQkMsSUFBaEIsR0FBdUJULEtBQXZCLENBQTZCLEdBQTdCLEVBQWtDLENBQWxDLENBQWIsQ0FGNkIsQ0FJN0I7O0FBQ0FJLEVBQUFBLE9BQU8sQ0FBQ00sSUFBUixDQUFhZCxRQUFRLENBQUNiLElBQUQsQ0FBckI7QUFDSCxDQU5EIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCB7c3Bhd259ID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7XG5jb25zdCB7c3Bhd25TeW5jfSA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpO1xuXG5mdW5jdGlvbiB0cmFuc3BpbGUocG9ydCwgZmlsZSkge1xuICAgIGNvbnN0IGNsaWVudCA9IHNwYXduU3luYyhcIm5vZGVcIiwgW1xuICAgICAgICBwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uXCIsIFwic3JjXCIsIFwiY2xpZW50LmpzXCIpLFxuICAgICAgICBwb3J0LCBwYXRoLmpvaW4oX19kaXJuYW1lLCBmaWxlKVxuICAgIF0pO1xuXG4gICAgaWYgKGNsaWVudC5lcnJvcilcbiAgICAgICAgdGhyb3cgY2xpZW50LmVycm9yO1xuXG4gICAgY29uc3Qgc3RkZXJyID0gU3RyaW5nKGNsaWVudC5zdGRlcnIpO1xuICAgIGlmIChzdGRlcnIubGVuZ3RoKVxuICAgICAgICBjb25zb2xlLmVycm9yKHN0ZGVycik7XG5cbiAgICBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihfX2Rpcm5hbWUsIGZpbGUpICsgXCIuZy5qc1wiLCBTdHJpbmcoY2xpZW50LnN0ZG91dCkpO1xuICAgIHJldHVybiBjbGllbnQuc3RhdHVzO1xufVxuXG5mdW5jdGlvbiBydW5UZXN0cyhwb3J0KSB7XG4gICAgbGV0IGZhaWxlZCA9IDA7XG5cbiAgICBmb3IgKGZpbGUgb2YgZnMucmVhZGRpclN5bmMoX19kaXJuYW1lKSkge1xuICAgICAgICBpZiAoZmlsZS5lbmRzV2l0aCgnLmcuanMnKSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgIHN3aXRjaCAoZmlsZS5zcGxpdCgnLicpLnBvcCgpKSB7XG4gICAgICAgICAgICBjYXNlIFwidHNcIjpcbiAgICAgICAgICAgIGNhc2UgXCJqc1wiOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUubG9nKGZpbGUpO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSB0cmFuc3BpbGUocG9ydCwgZmlsZSk7XG5cbiAgICAgICAgaWYgKHN0YXR1cyAhPSAwKVxuICAgICAgICAgICAgZmFpbGVkKys7XG4gICAgfVxuXG4gICAgaWYgKCFmYWlsZWQpXG4gICAgICAgIGNvbnNvbGUubG9nKGBcXG5hbGwgdGVzdHMgcGFzc2VkYCk7XG4gICAgZWxzZVxuICAgICAgICBjb25zb2xlLmxvZyhgXFxuJHtmYWlsZWR9IHRlc3RzIGZhaWxlZGApO1xuXG4gICAgcmV0dXJuIGZhaWxlZDtcbn1cblxuLy8gU3RhcnQgdHJhbnNwaWxlciBzZXJ2ZXIuXG5jb25zdCBzZXJ2ZXIgPSBzcGF3bihcIm5vZGVcIiwgW1xuICAgIHByb2Nlc3MuYXJndi5sZW5ndGggPiAyXG4gICAgICAgID8gcHJvY2Vzcy5hcmd2WzJdXG4gICAgICAgIDogcGF0aC5qb2luKF9fZGlybmFtZSwgXCIuLlwiLCBcInNyY1wiLCBcInNlcnZlci5qc1wiKVxuXSk7XG5cbnNlcnZlci5zdGRvdXQub24oJ2RhdGEnLCBkYXRhID0+IHtcbiAgICAvLyBHZXQgcG9ydCBmcm9tIGxvZy5cbiAgICBjb25zdCBwb3J0ID0gZGF0YS50b1N0cmluZygpLnRyaW0oKS5zcGxpdChcIjpcIilbMV07XG5cbiAgICAvLyBSdW4gdGVzdCBzdWl0ZS5cbiAgICBwcm9jZXNzLmV4aXQocnVuVGVzdHMocG9ydCkpO1xufSk7XG4iXX0=
