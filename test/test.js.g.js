"use strict";

const fs = require("fs");
const path = require("path");
const {
  spawn
} = require("child_process");
const {
  spawnSync
} = require("child_process");
function transpile(port, file) {
  const client = spawnSync("node", [path.join(__dirname, "..", "src", "client.js"), port, path.join(__dirname, file)]);
  if (client.error) throw client.error;
  const stderr = String(client.stderr);
  if (stderr.length) console.error(stderr);
  fs.writeFileSync(path.join(__dirname, file) + ".g.js", String(client.stdout));
  return client.status;
}
function runTests(port) {
  let failed = 0;
  for (file of fs.readdirSync(__dirname)) {
    if (file.endsWith('.g.js')) continue;
    switch (file.split('.').pop()) {
      case "ts":
      case "js":
        break;
      default:
        continue;
    }
    console.log(file);
    const status = transpile(port, file);
    if (status != 0) failed++;
  }
  if (!failed) console.log(`\nall tests passed`);else console.log(`\n${failed} tests failed`);
  return failed;
}

// Start transpiler server.
const server = spawn("node", [process.argv.length > 2 ? process.argv[2] : path.join(__dirname, "..", "src", "server.js")]);
server.stdout.on('data', data => {
  // Get port from log.
  const port = data.toString().trim().split(":")[1];

  // Run test suite.
  process.exit(runTests(port));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwic3Bhd24iLCJzcGF3blN5bmMiLCJ0cmFuc3BpbGUiLCJwb3J0IiwiZmlsZSIsImNsaWVudCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJlcnJvciIsInN0ZGVyciIsIlN0cmluZyIsImxlbmd0aCIsImNvbnNvbGUiLCJ3cml0ZUZpbGVTeW5jIiwic3Rkb3V0Iiwic3RhdHVzIiwicnVuVGVzdHMiLCJmYWlsZWQiLCJyZWFkZGlyU3luYyIsImVuZHNXaXRoIiwic3BsaXQiLCJwb3AiLCJsb2ciLCJzZXJ2ZXIiLCJwcm9jZXNzIiwiYXJndiIsIm9uIiwiZGF0YSIsInRvU3RyaW5nIiwidHJpbSIsImV4aXQiXSwic291cmNlcyI6WyJ0ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3Qge3NwYXdufSA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpO1xuY29uc3Qge3NwYXduU3luY30gPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTtcblxuZnVuY3Rpb24gdHJhbnNwaWxlKHBvcnQsIGZpbGUpIHtcbiAgICBjb25zdCBjbGllbnQgPSBzcGF3blN5bmMoXCJub2RlXCIsIFtcbiAgICAgICAgcGF0aC5qb2luKF9fZGlybmFtZSwgXCIuLlwiLCBcInNyY1wiLCBcImNsaWVudC5qc1wiKSxcbiAgICAgICAgcG9ydCwgcGF0aC5qb2luKF9fZGlybmFtZSwgZmlsZSlcbiAgICBdKTtcblxuICAgIGlmIChjbGllbnQuZXJyb3IpXG4gICAgICAgIHRocm93IGNsaWVudC5lcnJvcjtcblxuICAgIGNvbnN0IHN0ZGVyciA9IFN0cmluZyhjbGllbnQuc3RkZXJyKTtcbiAgICBpZiAoc3RkZXJyLmxlbmd0aClcbiAgICAgICAgY29uc29sZS5lcnJvcihzdGRlcnIpO1xuXG4gICAgZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4oX19kaXJuYW1lLCBmaWxlKSArIFwiLmcuanNcIiwgU3RyaW5nKGNsaWVudC5zdGRvdXQpKTtcbiAgICByZXR1cm4gY2xpZW50LnN0YXR1cztcbn1cblxuZnVuY3Rpb24gcnVuVGVzdHMocG9ydCkge1xuICAgIGxldCBmYWlsZWQgPSAwO1xuXG4gICAgZm9yIChmaWxlIG9mIGZzLnJlYWRkaXJTeW5jKF9fZGlybmFtZSkpIHtcbiAgICAgICAgaWYgKGZpbGUuZW5kc1dpdGgoJy5nLmpzJykpXG4gICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICBzd2l0Y2ggKGZpbGUuc3BsaXQoJy4nKS5wb3AoKSkge1xuICAgICAgICAgICAgY2FzZSBcInRzXCI6XG4gICAgICAgICAgICBjYXNlIFwianNcIjpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZyhmaWxlKTtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gdHJhbnNwaWxlKHBvcnQsIGZpbGUpO1xuXG4gICAgICAgIGlmIChzdGF0dXMgIT0gMClcbiAgICAgICAgICAgIGZhaWxlZCsrO1xuICAgIH1cblxuICAgIGlmICghZmFpbGVkKVxuICAgICAgICBjb25zb2xlLmxvZyhgXFxuYWxsIHRlc3RzIHBhc3NlZGApO1xuICAgIGVsc2VcbiAgICAgICAgY29uc29sZS5sb2coYFxcbiR7ZmFpbGVkfSB0ZXN0cyBmYWlsZWRgKTtcblxuICAgIHJldHVybiBmYWlsZWQ7XG59XG5cbi8vIFN0YXJ0IHRyYW5zcGlsZXIgc2VydmVyLlxuY29uc3Qgc2VydmVyID0gc3Bhd24oXCJub2RlXCIsIFtcbiAgICBwcm9jZXNzLmFyZ3YubGVuZ3RoID4gMlxuICAgICAgICA/IHByb2Nlc3MuYXJndlsyXVxuICAgICAgICA6IHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi5cIiwgXCJzcmNcIiwgXCJzZXJ2ZXIuanNcIilcbl0pO1xuXG5zZXJ2ZXIuc3Rkb3V0Lm9uKCdkYXRhJywgZGF0YSA9PiB7XG4gICAgLy8gR2V0IHBvcnQgZnJvbSBsb2cuXG4gICAgY29uc3QgcG9ydCA9IGRhdGEudG9TdHJpbmcoKS50cmltKCkuc3BsaXQoXCI6XCIpWzFdO1xuXG4gICAgLy8gUnVuIHRlc3Qgc3VpdGUuXG4gICAgcHJvY2Vzcy5leGl0KHJ1blRlc3RzKHBvcnQpKTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN4QixNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDNUIsTUFBTTtFQUFDRTtBQUFLLENBQUMsR0FBR0YsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUN4QyxNQUFNO0VBQUNHO0FBQVMsQ0FBQyxHQUFHSCxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRTVDLFNBQVNJLFNBQVMsQ0FBQ0MsSUFBSSxFQUFFQyxJQUFJLEVBQUU7RUFDM0IsTUFBTUMsTUFBTSxHQUFHSixTQUFTLENBQUMsTUFBTSxFQUFFLENBQzdCRixJQUFJLENBQUNPLElBQUksQ0FBQ0MsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQzlDSixJQUFJLEVBQUVKLElBQUksQ0FBQ08sSUFBSSxDQUFDQyxTQUFTLEVBQUVILElBQUksQ0FBQyxDQUNuQyxDQUFDO0VBRUYsSUFBSUMsTUFBTSxDQUFDRyxLQUFLLEVBQ1osTUFBTUgsTUFBTSxDQUFDRyxLQUFLO0VBRXRCLE1BQU1DLE1BQU0sR0FBR0MsTUFBTSxDQUFDTCxNQUFNLENBQUNJLE1BQU0sQ0FBQztFQUNwQyxJQUFJQSxNQUFNLENBQUNFLE1BQU0sRUFDYkMsT0FBTyxDQUFDSixLQUFLLENBQUNDLE1BQU0sQ0FBQztFQUV6QlosRUFBRSxDQUFDZ0IsYUFBYSxDQUFDZCxJQUFJLENBQUNPLElBQUksQ0FBQ0MsU0FBUyxFQUFFSCxJQUFJLENBQUMsR0FBRyxPQUFPLEVBQUVNLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDUyxNQUFNLENBQUMsQ0FBQztFQUM3RSxPQUFPVCxNQUFNLENBQUNVLE1BQU07QUFDeEI7QUFFQSxTQUFTQyxRQUFRLENBQUNiLElBQUksRUFBRTtFQUNwQixJQUFJYyxNQUFNLEdBQUcsQ0FBQztFQUVkLEtBQUtiLElBQUksSUFBSVAsRUFBRSxDQUFDcUIsV0FBVyxDQUFDWCxTQUFTLENBQUMsRUFBRTtJQUNwQyxJQUFJSCxJQUFJLENBQUNlLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFDdEI7SUFFSixRQUFRZixJQUFJLENBQUNnQixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUNDLEdBQUcsRUFBRTtNQUN6QixLQUFLLElBQUk7TUFDVCxLQUFLLElBQUk7UUFDTDtNQUNKO1FBQ0k7SUFBUztJQUdqQlQsT0FBTyxDQUFDVSxHQUFHLENBQUNsQixJQUFJLENBQUM7SUFDakIsTUFBTVcsTUFBTSxHQUFHYixTQUFTLENBQUNDLElBQUksRUFBRUMsSUFBSSxDQUFDO0lBRXBDLElBQUlXLE1BQU0sSUFBSSxDQUFDLEVBQ1hFLE1BQU0sRUFBRTtFQUNoQjtFQUVBLElBQUksQ0FBQ0EsTUFBTSxFQUNQTCxPQUFPLENBQUNVLEdBQUcsQ0FBRSxvQkFBbUIsQ0FBQyxDQUFDLEtBRWxDVixPQUFPLENBQUNVLEdBQUcsQ0FBRSxLQUFJTCxNQUFPLGVBQWMsQ0FBQztFQUUzQyxPQUFPQSxNQUFNO0FBQ2pCOztBQUVBO0FBQ0EsTUFBTU0sTUFBTSxHQUFHdkIsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUN6QndCLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDZCxNQUFNLEdBQUcsQ0FBQyxHQUNqQmEsT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQ2YxQixJQUFJLENBQUNPLElBQUksQ0FBQ0MsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQ3ZELENBQUM7QUFFRmdCLE1BQU0sQ0FBQ1QsTUFBTSxDQUFDWSxFQUFFLENBQUMsTUFBTSxFQUFFQyxJQUFJLElBQUk7RUFDN0I7RUFDQSxNQUFNeEIsSUFBSSxHQUFHd0IsSUFBSSxDQUFDQyxRQUFRLEVBQUUsQ0FBQ0MsSUFBSSxFQUFFLENBQUNULEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7O0VBRWpEO0VBQ0FJLE9BQU8sQ0FBQ00sSUFBSSxDQUFDZCxRQUFRLENBQUNiLElBQUksQ0FBQyxDQUFDO0FBQ2hDLENBQUMsQ0FBQyJ9
