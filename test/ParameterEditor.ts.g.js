"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _Dropdown = _interopRequireDefault(require("../controls/Dropdown"));
var _App = _interopRequireDefault(require("Native/App"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ParametersEditor = /*#__PURE__*/function () {
  function ParametersEditor() {
    _classCallCheck(this, ParametersEditor);
    _defineProperty(this, "haveSelected", false);
    _defineProperty(this, "developer", false);
    _defineProperty(this, "visible", false);
    _defineProperty(this, "sections", []);
    _defineProperty(this, "parameters", []);
    _defineProperty(this, "mappedSections", {});
  }
  _createClass(ParametersEditor, [{
    key: "open",
    value: function open() {
      this.filterMenu();
      this.visible = true;
    }
  }, {
    key: "close",
    value: function close() {
      this.visible = false;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.sections.length = 0;
      this.parameters.length = 0;
      this.mappedSections = {};
    }
  }, {
    key: "addSection",
    value: function addSection(name) {
      var section = new MenuSection(this, name);
      this.sections.push(section);
      this.mappedSections[name] = section;
      return section;
    }
  }, {
    key: "filterMenu",
    value: function filterMenu(developer) {
      if (developer === undefined) developer = this.developer;
      for (var i = 0; i < this.sections.length; i++) {
        this.sections[i].visible = false;
        for (var j = 0; j < this.sections[i].parameters.length; j++) {
          this.sections[i].parameters[j].visible = !this.sections[i].parameters[j].developer || developer;
          if (this.sections[i].parameters[j].visible) this.sections[i].visible = true;
        }
      }
      if (!this.haveSelected) {
        for (var j = 0; j < this.sections.length; j++) {
          if (this.sections[j].visible) {
            this.onSelected(this.sections[j]);
            return;
          }
        }
      } else if (!developer) {
        for (var i = 0; i < this.sections.length; i++) {
          if (this.sections[i].selected && !this.sections[i].visible) {
            for (var j = 0; j < this.sections.length; j++) {
              if (this.sections[j].visible) {
                this.onSelected(this.sections[j]);
                return;
              }
            }
          }
        }
      }
    }
  }, {
    key: "onSelected",
    value: function onSelected(arg) {
      this.parameters = arg.parameters;
      this.haveSelected = true;
      for (var i = 0; i < this.sections.length; i++) this.sections[i].selected = this.sections[i] === arg;
      _App["default"].queryEntityParameters(arg.name);
    }
  }, {
    key: "developerChanged",
    value: function developerChanged(arg) {
      this.filterMenu(arg.value);
    }
  }, {
    key: "onEntityParameter",
    value: function onEntityParameter(section, parameter, value) {
      if (!this.mappedSections[section] || !this.mappedSections[section].mappedParameters[parameter]) return;
      this.mappedSections[section].mappedParameters[parameter].resetValue(value);
    }
  }]);
  return ParametersEditor;
}();
exports["default"] = ParametersEditor;
// Dynamic menu parameters
var MenuParameter = /*#__PURE__*/function () {
  function MenuParameter(section, name, type, visibility, defaultValue, dropdownValues, units) {
    var _this = this;
    _classCallCheck(this, MenuParameter);
    _defineProperty(this, "section", void 0);
    _defineProperty(this, "key", void 0);
    _defineProperty(this, "developer", void 0);
    _defineProperty(this, "name", void 0);
    _defineProperty(this, "units", void 0);
    _defineProperty(this, "type", void 0);
    _defineProperty(this, "dropdown", void 0);
    _defineProperty(this, "value", void 0);
    _defineProperty(this, "oldValue", void 0);
    _defineProperty(this, "dirty", void 0);
    _defineProperty(this, "even", void 0);
    _defineProperty(this, "visible", void 0);
    this.section = section;
    this.key = name;
    this.developer = visibility == "developer";
    this.name = name;
    this.units = units;
    if (dropdownValues) {
      this.type = "dropdown";
      this.dropdown = new _Dropdown["default"](function (value) {
        if (_this.value === value.name) return;
        _this.value = value.name;
        _this.valueChanged({
          value: value.name
        });
      });
      var array = dropdownValues.split(",");
      for (var i = 0; i < array.length; i++) {
        var item = {
          name: array[i].trim()
        };
        this.dropdown.items.push(item);
      }
    } else if (type == "real") {
      this.type = "decimal";
    } else if (type == "integer") {
      this.type = "integer";
    } else if (type == "boolean") {
      this.type = "switch";
    } else {
      // list:real || matrix || list:integer || ...
      this.type = "text";
    }
    this.resetValue(defaultValue);
  }
  _createClass(MenuParameter, [{
    key: "resetValue",
    value: function resetValue(value) {
      if (this.type == "switch") this.value = value == "1" || value && value.toLowerCase() == "true";else this.value = value;
      if (this.type == "dropdown") for (var i = 0; i < this.dropdown.items.length; i++) if (this.dropdown.items[i].name == this.value) this.dropdown.select(this.dropdown.items[i]);
      this.oldValue = this.value;
      //console.log("reset " + this.section.name + "/" + this.key + " = " + this.value);
    }
  }, {
    key: "valueChanged",
    value: function valueChanged(arg) {
      // Defer applying text or number values to DUNE until focusLost(),
      // avoiding sending new values every time a new character is typed.
      if (this.type == "text" || this.type == "number") this.dirty = true;else this.applyValue(arg.value);
    }
  }, {
    key: "focusLost",
    value: function focusLost() {
      if (this.dirty) this.applyValue(this.value);
    }
  }, {
    key: "applyValue",
    value: function applyValue(value) {
      this.dirty = false;
      if (this.oldValue == value) return;
      this.oldValue = value;
      //console.log("apply " + this.section.name + "/" + this.key + " = " + value);
      _App["default"].setEntityParameter(this.section.name, this.key, value);
    }
  }]);
  return MenuParameter;
}();
var MenuSection = /*#__PURE__*/function () {
  function MenuSection(editor, name) {
    _classCallCheck(this, MenuSection);
    _defineProperty(this, "editor", void 0);
    _defineProperty(this, "name", void 0);
    _defineProperty(this, "visible", true);
    _defineProperty(this, "selected", false);
    _defineProperty(this, "parameters", []);
    _defineProperty(this, "mappedParameters", {});
    this.editor = editor;
    this.name = name;
  }
  _createClass(MenuSection, [{
    key: "addParameter",
    value: function addParameter(name, type, visibility, defaultValue, dropdownValues, units) {
      var parameter = new MenuParameter(this, name, type, visibility, defaultValue, dropdownValues, units);
      this.parameters.push(parameter);
      this.mappedParameters[name] = parameter;
      parameter.even = this.parameters.length % 2 == 0;
      return parameter;
    }
  }, {
    key: "onSelect",
    value: function onSelect() {
      this.editor.onSelected(this);
    }
  }]);
  return MenuSection;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
